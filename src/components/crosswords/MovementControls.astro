<script is:inline>
	const dir = { across: 'across', down: 'down' }
	let currentDirection = dir.across

	const crosswordCellFocused = (cell) => {
		cell.classList.remove('incorrect')
		cell.onmousedown = () => { 
			const otherDirection = (currentDirection == dir.across)
				? dir.down
				: dir.across

			if (cell.dataset[otherDirection] == '#') {
				return
			}

			changeDirection(otherDirection)
			
			document.querySelectorAll('input.highlight')
				.forEach(square => square.classList.remove('highlight'))

			document.querySelectorAll(`input[data-${currentDirection}="${cell.dataset[currentDirection]}"]`)
				.forEach(square => square.classList.add('highlight'))
		}

		document.getElementById(`clue-across-${cell.dataset.across}`)?.classList.add('selected')
		document.getElementById(`clue-down-${cell.dataset.down}`)?.classList.add('selected')

		if (cell.dataset[currentDirection] == '#') {
			changeDirection((currentDirection == dir.across) 
				? dir.down
				: dir.across)
		}
		document.querySelectorAll(`input[data-${currentDirection}="${cell.dataset[currentDirection]}"]`)
			.forEach(square => square.classList.add('highlight'))
	}

	const crosswordCellBlurred = (cell) => {
		cell.onmousedown = () => {}
		document.getElementById(`clue-across-${cell.dataset.across}`)?.classList.remove('selected')
		document.getElementById(`clue-down-${cell.dataset.down}`)?.classList.remove('selected')
		document.querySelectorAll('input.highlight')
			.forEach(square => square.classList.remove('highlight'))
	}

	const changeDirection = (newDirection) => {
		if (currentDirection != newDirection) {
			currentDirection = newDirection
		}
	}

	const getFocusedInput = () => {
		if (document.hasFocus() && document.activeElement.nodeName.toLowerCase() == 'input') {
			return document.activeElement;
		}
		return undefined
	}

	const move = (direction) => {
		const currentFocus = getFocusedInput()
		if (!currentFocus) {
			return
		}

		const moveIn = {
			'ArrowLeft': (x, y) => [x, y - 1],
			'ArrowRight': (x, y) => [x, y + 1],
			'ArrowUp': (x, y) => [x - 1, y],
			'ArrowDown': (x, y) => [x + 1, y],
		}

		const x = Number(currentFocus.dataset.x)
		const y = Number(currentFocus.dataset.y)
		const [newX, newY] = moveIn[direction](x, y)

		const destination = document.getElementById(`crossword-cell-${newX}-${newY}`)
		if (destination != undefined && destination != null && destination.dataset.answer != '#') {
			destination.focus()
			window.setTimeout(() => { 
				destination.select()
			}, 5)
		}
		else {
			window.setTimeout(() => {
				currentFocus.select()
			}, 5)
		}
	}

	const crosswordCellInput = (cell) => {
		const isDelete = (window.event?.inputType == 'deleteContentBackward')

		cell.value = cell.value.replace(/[^A-Za-z]/, '').toUpperCase()
		if (cell.value.length > 1) {
			cell.value = cell.value[1]
		}

		const nextMove = {
			[dir.across]: 'ArrowRight',
			[dir.down]: 'ArrowDown'
		}
		
		if (!isDelete) {
			move(nextMove[currentDirection])
		}
		
	}

	document.addEventListener('keydown', (event) => {
		if (event.key == 'ArrowLeft' ||
			event.key == 'ArrowRight' ||
			event.key == 'ArrowUp' ||
			event.key == 'ArrowDown') {

			changeDirection((event.key == 'ArrowLeft' || event.key == 'ArrowRight')
				? dir.across
				: dir.down)

			move(event.key)
		}
	})

	document.addEventListener('keydown', (event) => {
		if (event.key == "Backspace") {
			const moveBack = {
				[dir.across]: 'ArrowLeft',
				[dir.down]: 'ArrowUp'
			}

			if (event.target?.value?.length == 0) {
				console.log(event.target?.value)
				move(moveBack[currentDirection])
			}
		}
    })
</script>