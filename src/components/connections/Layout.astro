---
import BaseLayout from '../BaseLayout.astro'
import * as util from '../../utilities/dates'

const { content } = Astro.props

const base16 = '0123456789ABCDEF'.split('')
const colors = 'yellow green blue purple'.split(' ')

Object.keys(content.groups)

---
<BaseLayout>
	<title slot="head">{content.title}</title>
	<h1>
		{content.title}<span>, published {util.writtenDateFrom(content.date)}</span>
	</h1>
	<div id="game">
		<section id="board">
			<h2 class="screenreader-only">Board</h2>
			{content.grid.map((word: string, i: number) => (
				<input type="checkbox" id={`tile-${base16[i]}`} value={base16[i]} class="screenreader-only"/>
				<label for={`tile-${base16[i]}`} class="word-tile" style={`view-transition-name: tile_${i}`}>{word}</label>
			))}
			<div class="answer" id="answer-A"></div>
			<div class="answer" id="answer-E"></div>
			<div class="answer" id="answer-I"></div>
			<div class="answer" id="answer-M"></div>
		</section>
		<section>
			<dl>
				<dt>Mistakes:</dt>
				<dd id="mistake-counter">0</dd>
			</dl>
		</section>
		<section>
			<button id="shuffle" onclick="shuffle()">Shuffle</button>
			<button id="deselect" onclick="deselect()">Deselect</button>
			<button id="submit" onclick="guess()">Submit</button>
		</section>
	</div>
	<div id="answer-key" style="display: none">
		{Object.entries(content.groups).map(([key, name], index) => (
			<span
				id={key.slice(0, 4)/* in rare cases, extra letter added to force ordering as string */}
				data-name={name}
				data-color={colors[index]}
			/>
		))}
	</div>

	<script is:inline>

		let positionClasses = 'ABCDEFGHIJKLMNOP'
		let mistakes = 0

		function tryTransition(callback) {
			// @ts-ignore
			if (document.startViewTransition) {
				// @ts-ignore
				document.startViewTransition(callback)
			} else {
				callback()
			}
		}

		function shuffle() {
			const positions = positionClasses.split('')
				.map(value => ({value, sort: Math.random()}))
				.sort((a, b) => a.sort - b.sort)
				.map(({value}) => value)

			const tiles = [...document.querySelectorAll('.word-tile:not(.solved)').values()]
			tryTransition(() => {
				tiles.forEach((tile, i) => tile.className = `word-tile ${positions[i]}`)
			})
		}

		function deselect() {
			const selected = [...document.querySelectorAll('#board input:checked').values()]
			selected.forEach((option) => option.checked = false)
		}

		function guess() {
			const selected = [...document.querySelectorAll('#board input:checked').values()]
			const answer = document.getElementById(
				selected
					.map((option) => option.value)
					.sort() // format guess to match answer key
					.join('')
			)

			if (!answer) {
				document.getElementById('mistake-counter').innerHTML = ++mistakes
				document.getElementById('board').classList.add('wrong')
				setTimeout(() => document.getElementById('board').classList.remove('wrong'), 700)
				return
			}

			const tiles = [...document.querySelectorAll('#board input:checked + label').values()]
			const tileNames = []
			const positions = positionClasses.slice(0, 4)
			positionClasses = positionClasses.slice(4) // remove spots from pool

			tryTransition(() => {
				tiles.forEach((tile, i) => {
					const spaceHog = document.querySelector(`label.${positions[i]}`)
					if (spaceHog) {
						spaceHog.className = tile.className
					}
					tile.className = `word-tile solved ${positions[i]} ${answer.dataset.color}`
					tileNames.push(tile.innerHTML)
				})

				displayAnswer(positions[0], answer.dataset.name, tileNames.join(', '))
			})

			deselect()
		}

		function displayAnswer(answerNumber, groupName, tileNames) {
			const displayAnswer = document.getElementById(`answer-${answerNumber}`)
			displayAnswer.innerHTML = `<h4>${groupName}</h4><p>${tileNames}</p>`
			displayAnswer.classList.add('visible')
		}
	</script>
</BaseLayout>

<style>
	#board
	{
		display: grid;
		grid-template-columns: 1fr 1fr 1fr 1fr;
		grid-template-rows: 1fr 1fr 1fr 1fr;
		gap: 2px;
	}

	#board .answer
	{
		display: none;
		position: absolute;
		z-index: 99;
		grid-column: 1 / -1;

		flex-direction: column;
		gap: 4px;
		align-items: center;
		justify-content: center;
		text-align: center;
		color: var(--background);
		font-weight: bold;
	
		&.visible
		{
			display: flex;
			position: relative;
		}
	}

	#board .answer :global(h4)
	{
		font-size: 1.5rem;
		margin: 0;
	}

	#board .answer :global(p)
	{
		font-size: 0.75rem;
		margin: 0;
	}

	button
	{
		cursor: pointer;
		user-select: none;
		background: var(--semi-trans);
		color: var(--background);
		border: none;
		padding: 0 1ch;
		line-height: 2;
		
		font-family: var(--tekst);
		font-size: 1.1rem;
		border-radius: 12px;

		&:hover
		{
			background: var(--yellow);
		}
	}

	dl
	{
		display: flex;
		flex-direction: row;
	}

	label
	{
		cursor: pointer;
		user-select: none;
		aspect-ratio: 1 / 1;
		border-radius: 6px;
		background-color: var(--foreground);
		color: var(--background);

		font-weight: bold;
		font-size: 1rem;

		display: flex;
		align-items: center;
		justify-content: center;
		text-align: center;
		padding: 4px;

		width: 20vw;
		max-width: 100px;
	}

	input:checked + label
	{
		background-color: #59544f;
		color: var(--foreground);
	}

	#board.wrong input:checked + label
	{
		animation: shake 200ms ease-out 3;
	}

	label.solved
	{
		color: transparent !important;
		transform: scaleX(1.4);

		transition: background-color 100ms ease-in,
			color 100ms ease-in,
			transform 100ms ease;
	}

	.yellow { background-color: #f3ae4b !important }
	.green  { background-color: #8f9f6a !important }
	.blue   { background-color: #6086a4 !important }
	.purple { background-color: #925291 !important }

	/* if the board has 4 selected tiles, make others unselectable */
	#board:has(input:checked ~ input:checked ~input:checked ~ input:checked) input:not(:checked) + label
	{
		pointer-events: none;
	}

	section button#submit,
	section button#deselect
	{
		pointer-events: none;
		opacity: 0.5;
	}

	/* and activate the submit button */
	#board:has(input:checked ~ input:checked ~input:checked ~ input:checked) ~ section button#submit,
	#board:has(input:checked) ~ section button#deselect
	{
		pointer-events: all;
		cursor: pointer;
		opacity: 1;
	}

	/* positions available by shuffle, animated by view transitions */
	/* see: https://developer.mozilla.org/en-US/docs/Web/API/View_Transition_API */
	label.A { grid-column: 1; grid-row: 1; transform-origin: left }
	label.B { grid-column: 2; grid-row: 1 }
	label.C { grid-column: 3; grid-row: 1 }
	label.D { grid-column: 4; grid-row: 1; transform-origin: right }
	label.E { grid-column: 1; grid-row: 2; transform-origin: left }
	label.F { grid-column: 2; grid-row: 2 }
	label.G { grid-column: 3; grid-row: 2 }
	label.H { grid-column: 4; grid-row: 2; transform-origin: right }
	label.I { grid-column: 1; grid-row: 3; transform-origin: left }
	label.J { grid-column: 2; grid-row: 3 }
	label.K { grid-column: 3; grid-row: 3 }
	label.L { grid-column: 4; grid-row: 3; transform-origin: right }
	label.M { grid-column: 1; grid-row: 4; transform-origin: left }
	label.N { grid-column: 2; grid-row: 4 }
	label.O { grid-column: 3; grid-row: 4 }
	label.P { grid-column: 4; grid-row: 4; transform-origin: right }

	#answer-A { grid-row: 1 }
	#answer-E { grid-row: 2 }
	#answer-I { grid-row: 3 }
	#answer-M { grid-row: 4 }

	:global(main)
	{
		display: flex;
		flex-direction: column-reverse;
		gap: 20px;
	}

	h1, h2, h3
	{
		font-family: var(--tekst-mono);
		font-size: 1rem;
		font-weight: normal;
		letter-spacing: 0.02em;
		margin: 10px 0;

		& span
		{
			font-family: var(--tekst);
			color: var(--semi-trans);
		}
	}

	#game
	{
		display: flex;
		flex-direction: column;
		justify-content: center;
		max-width: max-content;
		margin: auto;
		gap: 20px;
	}

	@media (max-width: 500px)
	{
		label
		{
			font-size: 0.7em;
			padding: 0px;
		}
	}

	@keyframes shake
	{
		0% { transform: translateX(0px) }	
		25% { transform: translateX(10px) }
		50% { transform: translateX(0px) }
		75% { transform: translateX(-10px) }
		100% { transform: translateX(0px) }	
	}
</style>